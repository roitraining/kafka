package com.namespace;
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */


import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This is a record with only simple fields. */
@org.apache.avro.specific.AvroGenerated
public class Simple extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7928559957776547457L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Simple\",\"namespace\":\"com.namespace\",\"doc\":\"This is a record with only simple fields.\",\"fields\":[{\"name\":\"req1\",\"type\":\"string\",\"doc\":\"Required field 1\"},{\"name\":\"opt1\",\"type\":[\"string\",\"null\"],\"doc\":\"Optional Field 1\"},{\"name\":\"opt2\",\"type\":\"boolean\",\"doc\":\"Optional field 2\",\"default\":false},{\"name\":\"opt3\",\"type\":[\"double\",\"null\"],\"doc\":\"Optional field 3\"}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Required field 1 */
  @Deprecated public java.lang.CharSequence req1;
  /** Optional Field 1 */
  @Deprecated public java.lang.CharSequence opt1;
  /** Optional field 2 */
  @Deprecated public boolean opt2;
  /** Optional field 3 */
  @Deprecated public java.lang.Double opt3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Simple() {}

  /**
   * All-args constructor.
   * @param req1 Required field 1
   * @param opt1 Optional Field 1
   * @param opt2 Optional field 2
   * @param opt3 Optional field 3
   */
  public Simple(java.lang.CharSequence req1, java.lang.CharSequence opt1, java.lang.Boolean opt2, java.lang.Double opt3) {
    this.req1 = req1;
    this.opt1 = opt1;
    this.opt2 = opt2;
    this.opt3 = opt3;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return req1;
    case 1: return opt1;
    case 2: return opt2;
    case 3: return opt3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: req1 = (java.lang.CharSequence)value$; break;
    case 1: opt1 = (java.lang.CharSequence)value$; break;
    case 2: opt2 = (java.lang.Boolean)value$; break;
    case 3: opt3 = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'req1' field.
   * @return Required field 1
   */
  public java.lang.CharSequence getReq1() {
    return req1;
  }

  /**
   * Sets the value of the 'req1' field.
   * Required field 1
   * @param value the value to set.
   */
  public void setReq1(java.lang.CharSequence value) {
    this.req1 = value;
  }

  /**
   * Gets the value of the 'opt1' field.
   * @return Optional Field 1
   */
  public java.lang.CharSequence getOpt1() {
    return opt1;
  }

  /**
   * Sets the value of the 'opt1' field.
   * Optional Field 1
   * @param value the value to set.
   */
  public void setOpt1(java.lang.CharSequence value) {
    this.opt1 = value;
  }

  /**
   * Gets the value of the 'opt2' field.
   * @return Optional field 2
   */
  public java.lang.Boolean getOpt2() {
    return opt2;
  }

  /**
   * Sets the value of the 'opt2' field.
   * Optional field 2
   * @param value the value to set.
   */
  public void setOpt2(java.lang.Boolean value) {
    this.opt2 = value;
  }

  /**
   * Gets the value of the 'opt3' field.
   * @return Optional field 3
   */
  public java.lang.Double getOpt3() {
    return opt3;
  }

  /**
   * Sets the value of the 'opt3' field.
   * Optional field 3
   * @param value the value to set.
   */
  public void setOpt3(java.lang.Double value) {
    this.opt3 = value;
  }

  /**
   * Creates a new Simple RecordBuilder.
   * @return A new Simple RecordBuilder
   */
  public static com.namespace.Simple.Builder newBuilder() {
    return new com.namespace.Simple.Builder();
  }

  /**
   * Creates a new Simple RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Simple RecordBuilder
   */
  public static com.namespace.Simple.Builder newBuilder(com.namespace.Simple.Builder other) {
    return new com.namespace.Simple.Builder(other);
  }

  /**
   * Creates a new Simple RecordBuilder by copying an existing Simple instance.
   * @param other The existing instance to copy.
   * @return A new Simple RecordBuilder
   */
  public static com.namespace.Simple.Builder newBuilder(com.namespace.Simple other) {
    return new com.namespace.Simple.Builder(other);
  }

  /**
   * RecordBuilder for Simple instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Simple>
    implements org.apache.avro.data.RecordBuilder<Simple> {

    /** Required field 1 */
    private java.lang.CharSequence req1;
    /** Optional Field 1 */
    private java.lang.CharSequence opt1;
    /** Optional field 2 */
    private boolean opt2;
    /** Optional field 3 */
    private java.lang.Double opt3;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.namespace.Simple.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.req1)) {
        this.req1 = data().deepCopy(fields()[0].schema(), other.req1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.opt1)) {
        this.opt1 = data().deepCopy(fields()[1].schema(), other.opt1);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.opt2)) {
        this.opt2 = data().deepCopy(fields()[2].schema(), other.opt2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.opt3)) {
        this.opt3 = data().deepCopy(fields()[3].schema(), other.opt3);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Simple instance
     * @param other The existing instance to copy.
     */
    private Builder(com.namespace.Simple other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.req1)) {
        this.req1 = data().deepCopy(fields()[0].schema(), other.req1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.opt1)) {
        this.opt1 = data().deepCopy(fields()[1].schema(), other.opt1);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.opt2)) {
        this.opt2 = data().deepCopy(fields()[2].schema(), other.opt2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.opt3)) {
        this.opt3 = data().deepCopy(fields()[3].schema(), other.opt3);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'req1' field.
      * Required field 1
      * @return The value.
      */
    public java.lang.CharSequence getReq1() {
      return req1;
    }

    /**
      * Sets the value of the 'req1' field.
      * Required field 1
      * @param value The value of 'req1'.
      * @return This builder.
      */
    public com.namespace.Simple.Builder setReq1(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.req1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'req1' field has been set.
      * Required field 1
      * @return True if the 'req1' field has been set, false otherwise.
      */
    public boolean hasReq1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'req1' field.
      * Required field 1
      * @return This builder.
      */
    public com.namespace.Simple.Builder clearReq1() {
      req1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'opt1' field.
      * Optional Field 1
      * @return The value.
      */
    public java.lang.CharSequence getOpt1() {
      return opt1;
    }

    /**
      * Sets the value of the 'opt1' field.
      * Optional Field 1
      * @param value The value of 'opt1'.
      * @return This builder.
      */
    public com.namespace.Simple.Builder setOpt1(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.opt1 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'opt1' field has been set.
      * Optional Field 1
      * @return True if the 'opt1' field has been set, false otherwise.
      */
    public boolean hasOpt1() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'opt1' field.
      * Optional Field 1
      * @return This builder.
      */
    public com.namespace.Simple.Builder clearOpt1() {
      opt1 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'opt2' field.
      * Optional field 2
      * @return The value.
      */
    public java.lang.Boolean getOpt2() {
      return opt2;
    }

    /**
      * Sets the value of the 'opt2' field.
      * Optional field 2
      * @param value The value of 'opt2'.
      * @return This builder.
      */
    public com.namespace.Simple.Builder setOpt2(boolean value) {
      validate(fields()[2], value);
      this.opt2 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'opt2' field has been set.
      * Optional field 2
      * @return True if the 'opt2' field has been set, false otherwise.
      */
    public boolean hasOpt2() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'opt2' field.
      * Optional field 2
      * @return This builder.
      */
    public com.namespace.Simple.Builder clearOpt2() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'opt3' field.
      * Optional field 3
      * @return The value.
      */
    public java.lang.Double getOpt3() {
      return opt3;
    }

    /**
      * Sets the value of the 'opt3' field.
      * Optional field 3
      * @param value The value of 'opt3'.
      * @return This builder.
      */
    public com.namespace.Simple.Builder setOpt3(java.lang.Double value) {
      validate(fields()[3], value);
      this.opt3 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'opt3' field has been set.
      * Optional field 3
      * @return True if the 'opt3' field has been set, false otherwise.
      */
    public boolean hasOpt3() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'opt3' field.
      * Optional field 3
      * @return This builder.
      */
    public com.namespace.Simple.Builder clearOpt3() {
      opt3 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Simple build() {
      try {
        Simple record = new Simple();
        record.req1 = fieldSetFlags()[0] ? this.req1 : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.opt1 = fieldSetFlags()[1] ? this.opt1 : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.opt2 = fieldSetFlags()[2] ? this.opt2 : (java.lang.Boolean) defaultValue(fields()[2]);
        record.opt3 = fieldSetFlags()[3] ? this.opt3 : (java.lang.Double) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
