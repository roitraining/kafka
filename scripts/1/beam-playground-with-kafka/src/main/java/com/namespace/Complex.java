/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.namespace;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This is a record with only complex fields. */
@org.apache.avro.specific.AvroGenerated
public class Complex extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8803451965075416881L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Complex\",\"namespace\":\"com.namespace\",\"doc\":\"This is a record with only complex fields.\",\"fields\":[{\"name\":\"cmplx1\",\"type\":{\"type\":\"record\",\"name\":\"Simple\",\"doc\":\"This is a record with only simple fields.\",\"fields\":[{\"name\":\"req1\",\"type\":\"string\",\"doc\":\"Required field 1\"},{\"name\":\"opt1\",\"type\":[\"string\",\"null\"],\"doc\":\"Optional Field 1\"},{\"name\":\"opt2\",\"type\":\"boolean\",\"doc\":\"Optional field 2\",\"default\":false},{\"name\":\"opt3\",\"type\":[\"double\",\"null\"],\"doc\":\"Optional field 3\"}],\"version\":1},\"doc\":\"Required field 1\"},{\"name\":\"optcmplx\",\"type\":[{\"type\":\"record\",\"name\":\"Simple2\",\"doc\":\"This is a record with only simple fields.\",\"fields\":[{\"name\":\"s\",\"type\":\"boolean\",\"doc\":\"Required field\"}],\"version\":1},\"null\"],\"doc\":\"Optional Field 1\"},{\"name\":\"opt2\",\"type\":[\"boolean\",\"null\"],\"doc\":\"Optional field 2\",\"default\":false},{\"name\":\"opt3\",\"type\":[{\"type\":\"array\",\"items\":\"int\"},\"null\"],\"doc\":\"Optional field 3\",\"items\":\"com.namespace.Simple2\"}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Required field 1 */
  @Deprecated public com.namespace.Simple cmplx1;
  /** Optional Field 1 */
  @Deprecated public com.namespace.Simple2 optcmplx;
  /** Optional field 2 */
  @Deprecated public java.lang.Boolean opt2;
  /** Optional field 3 */
  @Deprecated public java.util.List<java.lang.Integer> opt3;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Complex() {}

  /**
   * All-args constructor.
   * @param cmplx1 Required field 1
   * @param optcmplx Optional Field 1
   * @param opt2 Optional field 2
   * @param opt3 Optional field 3
   */
  public Complex(com.namespace.Simple cmplx1, com.namespace.Simple2 optcmplx, java.lang.Boolean opt2, java.util.List<java.lang.Integer> opt3) {
    this.cmplx1 = cmplx1;
    this.optcmplx = optcmplx;
    this.opt2 = opt2;
    this.opt3 = opt3;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cmplx1;
    case 1: return optcmplx;
    case 2: return opt2;
    case 3: return opt3;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cmplx1 = (com.namespace.Simple)value$; break;
    case 1: optcmplx = (com.namespace.Simple2)value$; break;
    case 2: opt2 = (java.lang.Boolean)value$; break;
    case 3: opt3 = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'cmplx1' field.
   * @return Required field 1
   */
  public com.namespace.Simple getCmplx1() {
    return cmplx1;
  }

  /**
   * Sets the value of the 'cmplx1' field.
   * Required field 1
   * @param value the value to set.
   */
  public void setCmplx1(com.namespace.Simple value) {
    this.cmplx1 = value;
  }

  /**
   * Gets the value of the 'optcmplx' field.
   * @return Optional Field 1
   */
  public com.namespace.Simple2 getOptcmplx() {
    return optcmplx;
  }

  /**
   * Sets the value of the 'optcmplx' field.
   * Optional Field 1
   * @param value the value to set.
   */
  public void setOptcmplx(com.namespace.Simple2 value) {
    this.optcmplx = value;
  }

  /**
   * Gets the value of the 'opt2' field.
   * @return Optional field 2
   */
  public java.lang.Boolean getOpt2() {
    return opt2;
  }

  /**
   * Sets the value of the 'opt2' field.
   * Optional field 2
   * @param value the value to set.
   */
  public void setOpt2(java.lang.Boolean value) {
    this.opt2 = value;
  }

  /**
   * Gets the value of the 'opt3' field.
   * @return Optional field 3
   */
  public java.util.List<java.lang.Integer> getOpt3() {
    return opt3;
  }

  /**
   * Sets the value of the 'opt3' field.
   * Optional field 3
   * @param value the value to set.
   */
  public void setOpt3(java.util.List<java.lang.Integer> value) {
    this.opt3 = value;
  }

  /**
   * Creates a new Complex RecordBuilder.
   * @return A new Complex RecordBuilder
   */
  public static com.namespace.Complex.Builder newBuilder() {
    return new com.namespace.Complex.Builder();
  }

  /**
   * Creates a new Complex RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Complex RecordBuilder
   */
  public static com.namespace.Complex.Builder newBuilder(com.namespace.Complex.Builder other) {
    return new com.namespace.Complex.Builder(other);
  }

  /**
   * Creates a new Complex RecordBuilder by copying an existing Complex instance.
   * @param other The existing instance to copy.
   * @return A new Complex RecordBuilder
   */
  public static com.namespace.Complex.Builder newBuilder(com.namespace.Complex other) {
    return new com.namespace.Complex.Builder(other);
  }

  /**
   * RecordBuilder for Complex instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Complex>
    implements org.apache.avro.data.RecordBuilder<Complex> {

    /** Required field 1 */
    private com.namespace.Simple cmplx1;
    private com.namespace.Simple.Builder cmplx1Builder;
    /** Optional Field 1 */
    private com.namespace.Simple2 optcmplx;
    private com.namespace.Simple2.Builder optcmplxBuilder;
    /** Optional field 2 */
    private java.lang.Boolean opt2;
    /** Optional field 3 */
    private java.util.List<java.lang.Integer> opt3;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.namespace.Complex.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cmplx1)) {
        this.cmplx1 = data().deepCopy(fields()[0].schema(), other.cmplx1);
        fieldSetFlags()[0] = true;
      }
      if (other.hasCmplx1Builder()) {
        this.cmplx1Builder = com.namespace.Simple.newBuilder(other.getCmplx1Builder());
      }
      if (isValidValue(fields()[1], other.optcmplx)) {
        this.optcmplx = data().deepCopy(fields()[1].schema(), other.optcmplx);
        fieldSetFlags()[1] = true;
      }
      if (other.hasOptcmplxBuilder()) {
        this.optcmplxBuilder = com.namespace.Simple2.newBuilder(other.getOptcmplxBuilder());
      }
      if (isValidValue(fields()[2], other.opt2)) {
        this.opt2 = data().deepCopy(fields()[2].schema(), other.opt2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.opt3)) {
        this.opt3 = data().deepCopy(fields()[3].schema(), other.opt3);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Complex instance
     * @param other The existing instance to copy.
     */
    private Builder(com.namespace.Complex other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.cmplx1)) {
        this.cmplx1 = data().deepCopy(fields()[0].schema(), other.cmplx1);
        fieldSetFlags()[0] = true;
      }
      this.cmplx1Builder = null;
      if (isValidValue(fields()[1], other.optcmplx)) {
        this.optcmplx = data().deepCopy(fields()[1].schema(), other.optcmplx);
        fieldSetFlags()[1] = true;
      }
      this.optcmplxBuilder = null;
      if (isValidValue(fields()[2], other.opt2)) {
        this.opt2 = data().deepCopy(fields()[2].schema(), other.opt2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.opt3)) {
        this.opt3 = data().deepCopy(fields()[3].schema(), other.opt3);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'cmplx1' field.
      * Required field 1
      * @return The value.
      */
    public com.namespace.Simple getCmplx1() {
      return cmplx1;
    }

    /**
      * Sets the value of the 'cmplx1' field.
      * Required field 1
      * @param value The value of 'cmplx1'.
      * @return This builder.
      */
    public com.namespace.Complex.Builder setCmplx1(com.namespace.Simple value) {
      validate(fields()[0], value);
      this.cmplx1Builder = null;
      this.cmplx1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cmplx1' field has been set.
      * Required field 1
      * @return True if the 'cmplx1' field has been set, false otherwise.
      */
    public boolean hasCmplx1() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'cmplx1' field and creates one if it doesn't exist yet.
     * Required field 1
     * @return This builder.
     */
    public com.namespace.Simple.Builder getCmplx1Builder() {
      if (cmplx1Builder == null) {
        if (hasCmplx1()) {
          setCmplx1Builder(com.namespace.Simple.newBuilder(cmplx1));
        } else {
          setCmplx1Builder(com.namespace.Simple.newBuilder());
        }
      }
      return cmplx1Builder;
    }

    /**
     * Sets the Builder instance for the 'cmplx1' field
     * Required field 1
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.namespace.Complex.Builder setCmplx1Builder(com.namespace.Simple.Builder value) {
      clearCmplx1();
      cmplx1Builder = value;
      return this;
    }

    /**
     * Checks whether the 'cmplx1' field has an active Builder instance
     * Required field 1
     * @return True if the 'cmplx1' field has an active Builder instance
     */
    public boolean hasCmplx1Builder() {
      return cmplx1Builder != null;
    }

    /**
      * Clears the value of the 'cmplx1' field.
      * Required field 1
      * @return This builder.
      */
    public com.namespace.Complex.Builder clearCmplx1() {
      cmplx1 = null;
      cmplx1Builder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'optcmplx' field.
      * Optional Field 1
      * @return The value.
      */
    public com.namespace.Simple2 getOptcmplx() {
      return optcmplx;
    }

    /**
      * Sets the value of the 'optcmplx' field.
      * Optional Field 1
      * @param value The value of 'optcmplx'.
      * @return This builder.
      */
    public com.namespace.Complex.Builder setOptcmplx(com.namespace.Simple2 value) {
      validate(fields()[1], value);
      this.optcmplxBuilder = null;
      this.optcmplx = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'optcmplx' field has been set.
      * Optional Field 1
      * @return True if the 'optcmplx' field has been set, false otherwise.
      */
    public boolean hasOptcmplx() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'optcmplx' field and creates one if it doesn't exist yet.
     * Optional Field 1
     * @return This builder.
     */
    public com.namespace.Simple2.Builder getOptcmplxBuilder() {
      if (optcmplxBuilder == null) {
        if (hasOptcmplx()) {
          setOptcmplxBuilder(com.namespace.Simple2.newBuilder(optcmplx));
        } else {
          setOptcmplxBuilder(com.namespace.Simple2.newBuilder());
        }
      }
      return optcmplxBuilder;
    }

    /**
     * Sets the Builder instance for the 'optcmplx' field
     * Optional Field 1
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.namespace.Complex.Builder setOptcmplxBuilder(com.namespace.Simple2.Builder value) {
      clearOptcmplx();
      optcmplxBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'optcmplx' field has an active Builder instance
     * Optional Field 1
     * @return True if the 'optcmplx' field has an active Builder instance
     */
    public boolean hasOptcmplxBuilder() {
      return optcmplxBuilder != null;
    }

    /**
      * Clears the value of the 'optcmplx' field.
      * Optional Field 1
      * @return This builder.
      */
    public com.namespace.Complex.Builder clearOptcmplx() {
      optcmplx = null;
      optcmplxBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'opt2' field.
      * Optional field 2
      * @return The value.
      */
    public java.lang.Boolean getOpt2() {
      return opt2;
    }

    /**
      * Sets the value of the 'opt2' field.
      * Optional field 2
      * @param value The value of 'opt2'.
      * @return This builder.
      */
    public com.namespace.Complex.Builder setOpt2(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.opt2 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'opt2' field has been set.
      * Optional field 2
      * @return True if the 'opt2' field has been set, false otherwise.
      */
    public boolean hasOpt2() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'opt2' field.
      * Optional field 2
      * @return This builder.
      */
    public com.namespace.Complex.Builder clearOpt2() {
      opt2 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'opt3' field.
      * Optional field 3
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getOpt3() {
      return opt3;
    }

    /**
      * Sets the value of the 'opt3' field.
      * Optional field 3
      * @param value The value of 'opt3'.
      * @return This builder.
      */
    public com.namespace.Complex.Builder setOpt3(java.util.List<java.lang.Integer> value) {
      validate(fields()[3], value);
      this.opt3 = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'opt3' field has been set.
      * Optional field 3
      * @return True if the 'opt3' field has been set, false otherwise.
      */
    public boolean hasOpt3() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'opt3' field.
      * Optional field 3
      * @return This builder.
      */
    public com.namespace.Complex.Builder clearOpt3() {
      opt3 = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Complex build() {
      try {
        Complex record = new Complex();
        if (cmplx1Builder != null) {
          record.cmplx1 = this.cmplx1Builder.build();
        } else {
          record.cmplx1 = fieldSetFlags()[0] ? this.cmplx1 : (com.namespace.Simple) defaultValue(fields()[0]);
        }
        if (optcmplxBuilder != null) {
          record.optcmplx = this.optcmplxBuilder.build();
        } else {
          record.optcmplx = fieldSetFlags()[1] ? this.optcmplx : (com.namespace.Simple2) defaultValue(fields()[1]);
        }
        record.opt2 = fieldSetFlags()[2] ? this.opt2 : (java.lang.Boolean) defaultValue(fields()[2]);
        record.opt3 = fieldSetFlags()[3] ? this.opt3 : (java.util.List<java.lang.Integer>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
