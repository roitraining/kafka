package com.namespace;
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */


import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** This is a record with only simple fields. */
@org.apache.avro.specific.AvroGenerated
public class Simple2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6021751022732811401L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Simple2\",\"namespace\":\"com.namespace\",\"doc\":\"This is a record with only simple fields.\",\"fields\":[{\"name\":\"s\",\"type\":\"boolean\",\"doc\":\"Required field\"}],\"version\":1}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** Required field */
  @Deprecated public boolean s;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Simple2() {}

  /**
   * All-args constructor.
   * @param s Required field
   */
  public Simple2(java.lang.Boolean s) {
    this.s = s;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return s;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: s = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 's' field.
   * @return Required field
   */
  public java.lang.Boolean getS() {
    return s;
  }

  /**
   * Sets the value of the 's' field.
   * Required field
   * @param value the value to set.
   */
  public void setS(java.lang.Boolean value) {
    this.s = value;
  }

  /**
   * Creates a new Simple2 RecordBuilder.
   * @return A new Simple2 RecordBuilder
   */
  public static com.namespace.Simple2.Builder newBuilder() {
    return new com.namespace.Simple2.Builder();
  }

  /**
   * Creates a new Simple2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Simple2 RecordBuilder
   */
  public static com.namespace.Simple2.Builder newBuilder(com.namespace.Simple2.Builder other) {
    return new com.namespace.Simple2.Builder(other);
  }

  /**
   * Creates a new Simple2 RecordBuilder by copying an existing Simple2 instance.
   * @param other The existing instance to copy.
   * @return A new Simple2 RecordBuilder
   */
  public static com.namespace.Simple2.Builder newBuilder(com.namespace.Simple2 other) {
    return new com.namespace.Simple2.Builder(other);
  }

  /**
   * RecordBuilder for Simple2 instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Simple2>
    implements org.apache.avro.data.RecordBuilder<Simple2> {

    /** Required field */
    private boolean s;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.namespace.Simple2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.s)) {
        this.s = data().deepCopy(fields()[0].schema(), other.s);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Simple2 instance
     * @param other The existing instance to copy.
     */
    private Builder(com.namespace.Simple2 other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.s)) {
        this.s = data().deepCopy(fields()[0].schema(), other.s);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 's' field.
      * Required field
      * @return The value.
      */
    public java.lang.Boolean getS() {
      return s;
    }

    /**
      * Sets the value of the 's' field.
      * Required field
      * @param value The value of 's'.
      * @return This builder.
      */
    public com.namespace.Simple2.Builder setS(boolean value) {
      validate(fields()[0], value);
      this.s = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 's' field has been set.
      * Required field
      * @return True if the 's' field has been set, false otherwise.
      */
    public boolean hasS() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 's' field.
      * Required field
      * @return This builder.
      */
    public com.namespace.Simple2.Builder clearS() {
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public Simple2 build() {
      try {
        Simple2 record = new Simple2();
        record.s = fieldSetFlags()[0] ? this.s : (java.lang.Boolean) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
